<?php
namespace Buybrain\Buybrain;

use Buybrain\Buybrain\Util\DateTimes;
use DateTimeInterface;

/**
 * Representation of a sales forecast for a single article, generated by the buybrain system
 *
 * @link https://buybrain.io/docs#type-sales-forecasts
 */
class SalesForecast implements BuybrainEntity
{
    const ENTITY_TYPE = 'salesForecast';

    use AsNervusEntityTrait;
    use EntityIdFactoryTrait;

    /** @var string */
    private $id;
    /** @var DateTimeInterface */
    private $createDate;
    /** @var string */
    private $modelId;
    /** @var string */
    private $sku;
    /** @var string */
    private $channel;
    /** @var SalesForecastPeriod[] */
    private $periods;
    /** @var SalesForecastCertainty[] */
    private $certainties;

    /**
     * @param string $id
     * @param DateTimeInterface $createDate
     * @param string $modelId
     * @param string $sku
     * @param string $channel
     * @param SalesForecastPeriod[] $periods
     * @param SalesForecastCertainty[] $certainties
     */
    public function __construct(
        $id,
        DateTimeInterface $createDate,
        $modelId,
        $sku,
        $channel,
        array $periods,
        array $certainties
    ) {
        $this->id = (string)$id;
        $this->createDate = $createDate;
        $this->modelId = (string)$modelId;
        $this->sku = (string)$sku;
        $this->channel = (string)$channel;
        $this->periods = $periods;
        $this->certainties = $certainties;
    }

    /**
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return DateTimeInterface
     */
    public function getCreateDate()
    {
        return $this->createDate;
    }

    /**
     * @return string
     */
    public function getModelId()
    {
        return $this->modelId;
    }

    /**
     * @return string
     */
    public function getSku()
    {
        return $this->sku;
    }

    /**
     * @return string
     */
    public function getChannel()
    {
        return $this->channel;
    }

    /**
     * @return SalesForecastPeriod[]
     */
    public function getPeriods()
    {
        return $this->periods;
    }

    /**
     * Get the map of the certainties that no more than a specific quantity is sold before the end of the period.
     * For example, a key of "2" with a value of 0.8125 means that there is a 81.25% chance that no more than 2 items
     * get sold before the end of the current period, including the amounts sold in previous periods.
     *
     * @return SalesForecastCertainty[] certainties between 0.0 and 1.0 indexed by integer quantities
     */
    public function getCertainties()
    {
        return $this->certainties;
    }

    /**
     * @return array
     */
    public function jsonSerialize()
    {
        return [
            'id' => $this->id,
            'createDate' => DateTimes::format($this->createDate),
            'modelId' => $this->modelId,
            'sku' => $this->sku,
            'channel' => $this->channel,
            'periods' => $this->periods,
            'certainties' => $this->certainties
        ];
    }

    /**
     * Create a SalesForecast instance from parsed JSON.
     * This class can be subclassed, and the subclass will be instantiated.
     *
     * @param array $json
     * @return static
     */
    public static function fromJson(array $json)
    {
        return new static(
            $json['id'],
            DateTimes::parse($json['createDate']),
            $json['modelId'],
            $json['sku'],
            $json['channel'],
            array_map([SalesForecastPeriod::class, 'fromJson'], $json['periods']),
            array_map([SalesForecastCertainty::class, 'fromJson'], $json['certainties'])
        );
    }

    /**
     * @return string
     */
    public function getType()
    {
        return self::ENTITY_TYPE;
    }
}
